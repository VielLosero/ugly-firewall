#!/bin/bash
#BSD 3-Clause License
#
#Copyright (c) 2019, VielLosero
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Ugly-Firewall
version="version 0.3"

############################################
# Load config file 
############################################
SCRIPT=$(readlink -f $0)
BASE_DIR=$(dirname $SCRIPT)
source $BASE_DIR/uf.config.sh
source $BASE_DIR/uf.config.interfaces.sh

############################################
# Load interfaces
############################################
interfaces(){
read -e -i "$WAN" -p "Enter new WAN: " WAN && WAN=${WAN:-$WAN}
read -e -i "$LAN" -p "Enter new LAN: " LAN && LAN=${LAN:-$LAN}
read -e -i "$VPN" -p "Enter new VPN: " VPN && VPN=${VPN:-$VPN}
read -e -i "$in_int" -p "Enter new in_int: " in_int && in_int=${in_int:-$in_int}
read -e -i "$out_int" -p "Enter new out_int: " out_int && out_int=${out_int:-$out_int}
echo "Write interfaces to uf.config.interfaces.sh"
cat <<EOF> $BASE_DIR/uf.config.interfaces.sh
#!/ in/bash

#Ugly-Firewall interfaces's config file

############################################
# Interfaces 
############################################
WAN=$WAN
LAN=$LAN
VPN=$VPN
out_int=$out_int
in_int=$in_int
EOF
}

############################################
# Clean the firewall rules
############################################
flush(){
for table in ${tables[@]}; do
$iptables -t $table -F; $iptables -t $table -X
$ip6tables -t $table -F; $ip6tables -t $table -X
done && echo -e "$RUN flushing all ip4 and ip6, tables and chains $OK"
}

############################################
# List firewall rules 
############################################
rules(){
read -p " Enter table to list or \"all\": " table
[ "$table" == "all" ] && rules_all && exit 0
read -p " Enter chain name, or intro for all: " chain 
rules_one $table $chain && exit 0
}

rules_all(){
echo " [*] status for all ip4 ip6, tables and chains"
for table in ${tables[@]}; do
echo -e "\e[1;31m -- $table -- \e[00m"
$iptables -t $table -L -n -v
echo -e "\e[1;31m -- ip6 $table -- \e[00m"
$ip6tables -t $table -L -n -v
done
}

rules_one(){
table=$1
chain=$2
echo -e "\e[1;31m -- $table $chain -- \e[00m"
$iptables -t $table -L $chain -n -v
echo -e "\e[1;31m -- ip6 $table $chain -- \e[00m"
$ip6tables -t $table -L $chain -n -v
}

############################################
# Show firewall status
############################################
rules_ip4(){
echo -e "\e[1;32mip4 pkts bytes target     prot opt in     out     source               destination"
for table in ${tables[@]}; do
$iptables -t $table -L -n -v | grep " LOG-" | grep -v "Chain"
#$iptables -t $table -L -n -v --line-numbers | grep " LOG-" | grep -v "Chain"
done
}

rules_ip6(){
echo -e "\e[1;33mip6 pkts bytes target     prot opt in     out     source               destination"
for table in ${tables[@]}; do
$ip6tables -t $table -L -n -v | grep " LOG-" | grep -v "Chain"
#$ip6tables -t $table -L -n -v --line-numbers | grep " LOG-" | grep -v "Chain"
done
}

############################################
# Policy menu
############################################
print_policy(){
while :;do
clear
	echo -e "\e[1;32m ip4 \e[00m"
	for table in ${tables[@]}; do
		IFS=$'\n';for i in $($iptables -t $table -L -n -v | grep "Chain" | grep -v "LOG-");do echo " $table  $i" ; done 
	done
	echo -e "\e[1;33m ip6 \e[00m"
	for table in ${tables[@]}; do
		IFS=$'\n';for i in $($ip6tables -t $table -L -n -v | grep "Chain" | grep -v "LOG-");do echo " $table  $i" ; done 
	done
    	
	echo -e "\e[00mUGLY-FIREWALL: [\e[1;31mq\e[00muit] [\e[1;34ma\e[00mccept-all] [\e[1;34md\e[00mrop-all] " && read -t .1 -N 1 input
	case $input in
		d|dropall)	drop	
		;;
		a|acceptall)	accept
		;;
		q|quit)		return
		;;
		*) 	sleep 1
		;;
	esac
done
}

drop(){
$BASE_DIR/iptables.policy.drop.sh && echo -e "$RUN set all policy firewall to DROP $OK" || echo -e "$RUN load policy DROP $FAIL"
}

accept(){
$BASE_DIR/iptables.policy.accept.sh && echo -e "$RUN set all policy firewall to ACCEPT $OK" || echo -e "$RUN load policy ACCEPT $FAIL"
}

############################################
# Reset firewall counters
############################################
zero(){
	# iptables v1.8.3 (nf_tables):  RULE_REPLACE failed (Invalid argument): rule in chain OUTPUT
for table in ${tables[@]}; do
$iptables -t $table -Z
$ip6tables -t $table -Z
done && echo -e "$RUN Zeroed all ip4 and ip6, tables and chains $OK"
}

############################################
# Load log rules
############################################
load_log(){
if [[ $log_lvl -eq 0 ]] ; then
$BASE_DIR/iptables.log.drop.sh && echo -e "$RUN load log.drop $OK" || echo -e "$RUN load log.drop $FAIL"
else
$BASE_DIR/iptables.log.all.sh && echo -e "$RUN load log.all $OK" || echo -e "$RUN load log.all $FAIL"
fi
}

############################################
# Load base firewall
############################################
base(){
if [ $(cat /etc/hostname) == "ohm" ] ; then
	flush && load_log && $BASE_DIR/iptables.base.server.sh && echo -e "$RUN base system firewall $OK" || echo -e "$RUN base system firewall $FAIL"
else
	flush && load_log && $BASE_DIR/iptables.base.sh && echo -e "$RUN base system firewall $OK" || echo -e "$RUN base system firewall $FAIL"
	#flush && load_log && $BASE_DIR/iptables.base.sh && echo -e "$RUN base system firewall $OK" || echo -e "$RUN base system firewall $FAIL"
fi
}


############################################
# Menu to load rulescripts/firescripts
############################################
load(){
clear
echo " "
echo "--- Ugly firewall load screen --- "
echo " "
echo -e " Press [\e[1;32ma\e[00m] to load user rules "
echo -e " Press [\e[1;31md\e[00m] to load user rules "
echo -e " Press [\e[1;34mf\e[00m] to load preconfigured firewalls"
echo " "
read -N 1 -p "Select option: " option
case $option in
	a) load_rulescript ADD
		;;
	d) load_rulescript DEL
		;;
	f) load_firescript
		;;
	*) echo -e "$RUN Invalid option, selection $FAIL"
esac
}

############################################
# Menu to load user rulescripts 
############################################
load_rulescript(){
clear
echo " "
echo "--- Ugly firewall rulescripts --- "
echo " "
IFS=" "
declare -a rules=($(echo ${BASE_DIR}/rules.uf*))
for rule in ${!rules[@]} ; do
	file=$(basename ${rules[$rule]})
	echo "[$rule] $file"
done
echo ""
read -p "Select option: " option
if [[ " ${!rules[@]} " =~ " $option " ]]; then
	echo -e "$RUN loading ${rules[$option]} $OK"
	${rules[$option]} $1
else
	echo -e "$RUN Invalid option, selection $FAIL"
fi
       	
}

############################################
# Menu to load user firescripts 
############################################
load_firescript(){
clear
echo " "
echo "--- Ugly firewall firescripts --- "
echo " "
IFS=" "
declare -a firewalls=($(echo ${BASE_DIR}/firewall.uf*))
for firewall in ${!firewalls[@]} ; do
	file=$(basename ${firewalls[$firewall]})
	echo "[$firewall] $file"
done
echo ""
read -p "Select option: " option
if [[ " ${!firewalls[@]} " =~ " $option " ]]; then
	echo -e "$RUN loading ${firewalls[$option]} $OK"
	${firewalls[$option]}
else
	echo -e "$RUN Invalid option, selection $FAIL"
fi
       	
}
############################################
# Main loop 
############################################
while :; do
	WAN=$(cat $BASE_DIR/uf.config.interfaces.sh | grep WAN | awk -F= '{print $2}')
	LAN=$(cat $BASE_DIR/uf.config.interfaces.sh | grep LAN | awk -F= '{print $2}')
	VPN=$(cat $BASE_DIR/uf.config.interfaces.sh | grep VPN | awk -F= '{print $2}')
	in_int=$(cat $BASE_DIR/uf.config.interfaces.sh | grep in_int | awk -F= '{print $2}')
	out_int=$(cat $BASE_DIR/uf.config.interfaces.sh | grep out_int | awk -F= '{print $2}')
	tput clear
	echo -e "\e[00mINTERFACES: WAN:$WAN LAN:$LAN VPN:$VPN in_int:$in_int out_in:$out_int"
	[[ $show_ip4 -eq 1 ]] && rules_ip4
	[[ $show_ip6 -eq 1 ]] && rules_ip6
	# -t for timeout, -N for just 1 character
    	echo -e "\e[00mUGLY-FIREWALL: [\e[1;31mq\e[00muit] [\e[1;34mz\e[00mero-counters] [\e[1;34mf\e[00mlush] [\e[1;34mb\e[00mase] [\e[1;34ml\e[00moad] [\e[1;34mp\e[00molicy] [ip\e[1;34m4\e[00m] [ip\e[1;34m6\e[00m] [lo\e[1;34mg\e[00m_lvl] [\e[1;34mi\e[00mnterfaces]" && read -t .1 -N 1 input
	
case $input in
	f|flush)	flush
		;;
	r|rules)	rules
			;;
	g|log)		
			if [[ $log_lvl -eq 1 ]]; then log_lvl=0 && base ; else
			if [[ $log_lvl -eq 0 ]]; then log_lvl=1 && base ; fi ;fi
			;;
	b|base)		base
		;;
	l|load)		load
		;;
	p|policy)	print_policy
		;;
	z|zero)		zero
		;;
	4)		if [[ $show_ip4 -eq 1 ]] ; then show_ip4=0 ; else 
		       	if [[ $show_ip4 -eq 0 ]] ; then show_ip4=1 ; fi ; fi
		;;
	6)		if [[ $show_ip6 -eq 1 ]] ; then show_ip6=0 ; else 
		       	if [[ $show_ip6 -eq 0 ]] ; then show_ip6=1 ; fi ; fi
		;;
	a|all)		show_ip6=1 && show_ip4=1
		;;
	i|interfaces)	interfaces
		;;
	q|quit)		break
		;;

	*)	sleep 1
		;;
esac
done
